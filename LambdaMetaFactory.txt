cargo run -- ~/SoftDevII/unit09-PokeJofeJr4th/target/classes/unit09/lambdas/Student.class ~/SoftDevII/unit09-PokeJofeJr4th/target/classes/unit09/lambdas/Student\$1.class -v

https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-6.html#jvms-6.5.invokedynamic
First, the unsigned indexbyte1 and indexbyte2 are used to construct an index into the run-time constant pool of the current class.
The run-time constant pool entry at the index must be a symbolic reference to a dynamically-computed call site.
The symbolic reference is resolved (ยง5.4.3.6) for this specific invokedynamic instruction to obtain a reference to an instance of java.lang.invoke.CallSite.
The instance of java.lang.invoke.CallSite is considered "bound" to this specific invokedynamic instruction.
The instance of java.lang.invoke.CallSite indicates a target method handle. The nargs argument values are popped from the operand stack, and the target method handle is invoked.
The invocation occurs as if by execution of an invokevirtual instruction that indicates a run-time constant pool index to a symbolic reference R where:
    R is a symbolic reference to a method of a class;
    for the symbolic reference to the class in which the method is to be found, R specifies java.lang.invoke.MethodHandle;
    for the name of the method, R specifies invokeExact;
    for the descriptor of the method, R specifies the method descriptor in the dynamically-computed call site.
and where it is as if the following items were pushed, in order, onto the operand stack:
    a reference to the target method handle;
    the nargs argument values, where the number, type, and order of the values must be consistent with the method descriptor in the dynamically-computed call site.

https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-4.html#jvms-4.4.10


https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/LambdaMetafactory.html
Parameters:
    caller - Represents a lookup context with the accessibility privileges of the caller. When used with invokedynamic, this is stacked automatically by the VM.
    invokedName - The name of the method to implement. When used with invokedynamic, this is provided by the NameAndType of the InvokeDynamic structure and is stacked automatically by the VM.
    invokedType - The expected signature of the CallSite. The parameter types represent the types of capture variables; the return type is the interface to implement. When used with invokedynamic, this is provided by the NameAndType of the InvokeDynamic structure and is stacked automatically by the VM. In the event that the implementation method is an instance method and this signature has any parameters, the first parameter in the invocation signature must correspond to the receiver.
    samMethodType - Signature and return type of method to be implemented by the function object.
    implMethod - A direct method handle describing the implementation method which should be called (with suitable adaptation of argument types, return types, and with captured arguments prepended to the invocation arguments) at invocation time.
    instantiatedMethodType - The signature and return type that should be enforced dynamically at invocation time. This may be the same as samMethodType, or may be a specialization of it.
Returns:
    a CallSite whose target can be used to perform capture, generating instances of the interface named by invokedType

the method descriptor in the dynamically-computed call site is the same as the interface method
